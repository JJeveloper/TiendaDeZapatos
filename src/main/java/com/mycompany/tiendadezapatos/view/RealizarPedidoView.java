/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package com.mycompany.tiendadezapatos.view;

import com.mycompany.tiendadezapatos.dao.ActualizarPrecioDAO;
import com.mycompany.tiendadezapatos.dao.DetalleCompraDAO;
import com.mycompany.tiendadezapatos.dao.DetallePedidoDAO;
import com.mycompany.tiendadezapatos.dao.MercanciaDAO;
import com.mycompany.tiendadezapatos.dao.PedidoDAO;
import com.mycompany.tiendadezapatos.model.Actualizarprecio;
import com.mycompany.tiendadezapatos.model.DetalleCompra;
import com.mycompany.tiendadezapatos.model.Detallepedido;
import com.mycompany.tiendadezapatos.model.Mercancia;
import com.mycompany.tiendadezapatos.model.Pedido;
import com.mycompany.tiendadezapatos.model.Proveedor;
import java.awt.Component;
import java.math.BigDecimal;
import static java.math.RoundingMode.UNNECESSARY;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author JJAB
 */
public class RealizarPedidoView extends javax.swing.JInternalFrame {

    private DefaultTableModel dtmMercancia;
    private DefaultTableModel dtmPedido;

    private int idProveedor;
    private String idTabla1;
    private String nombre;
    private String codigo;

    private MercanciaDAO mercanciaDAO = new MercanciaDAO();
    private PedidoDAO pedidoDAO = new PedidoDAO();

    /**
     * Creates new form SeleccionarMercanciaView
     */
    public RealizarPedidoView() {
        initComponents();
        crearTablaMercancia();
        creartablaPedido();

//        txtCantidad.setEnabled(false);
//        txtPrecioCompra.setEnabled(false);
//        txtPrecioVenta.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        txtBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMercancia = new javax.swing.JTable();
        panelAgregarMercancia = new javax.swing.JPanel();
        txtPrecioCompra = new javax.swing.JTextField();
        txtPrecioVenta = new javax.swing.JTextField();
        txtCantidad = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPedido = new javax.swing.JTable();
        btnEliminar = new javax.swing.JButton();
        btnRealizarPedido = new javax.swing.JButton();
        lblTotal = new javax.swing.JLabel();

        setClosable(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccionar Mercancia"));

        tblMercancia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMercancia.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMercanciaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMercancia);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelAgregarMercancia.setBorder(javax.swing.BorderFactory.createTitledBorder("Agregar Mercancia"));

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel2.setText("Cantidad");

        jLabel3.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel3.setText("Precio Compra");

        jLabel4.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel4.setText("Precio Venta");

        jLabel5.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel5.setText("Min - Max:  0.01 - 9999.99");

        jLabel6.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel6.setText("Min - Max:  0.01 - 9999.99");

        jLabel7.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel7.setText("Min - Max: 1 - 10000");

        btnAgregar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAgregarMercanciaLayout = new javax.swing.GroupLayout(panelAgregarMercancia);
        panelAgregarMercancia.setLayout(panelAgregarMercanciaLayout);
        panelAgregarMercanciaLayout.setHorizontalGroup(
            panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                        .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(30, 30, 30)
                        .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                        .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4)
                            .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(174, 174, 174))
                    .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                        .addComponent(btnAgregar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        panelAgregarMercanciaLayout.setVerticalGroup(
            panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPrecioCompra, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAgregarMercanciaLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPrecioVenta, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(panelAgregarMercanciaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(jLabel6)))
                .addGap(12, 12, 12)
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(108, 108, 108))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Hacer Pedido"));

        tblPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblPedido);

        btnEliminar.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnRealizarPedido.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnRealizarPedido.setText("Realizar Pedido");
        btnRealizarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarPedidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 760, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btnEliminar)
                        .addGap(35, 35, 35)
                        .addComponent(btnRealizarPedido)
                        .addGap(31, 31, 31)
                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRealizarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(7, 7, 7))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelAgregarMercancia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(panelAgregarMercancia, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void obtenerIdProveedor(int idProveedor) {
        this.idProveedor = idProveedor;
        cargarTablaMercancia();
    }

    private void crearTablaMercancia() {
        dtmMercancia = new DefaultTableModel();
        dtmMercancia.addColumn("id");
        dtmMercancia.addColumn("Codigo");
        dtmMercancia.addColumn("Nombre");
        dtmMercancia.addColumn("Stock");
        dtmMercancia.addColumn("Compra");
        dtmMercancia.addColumn("Venta");

        tblMercancia.setModel(dtmMercancia);
    }

    public void cargarTablaMercancia() {

        List<Mercancia> mercancias = mercanciaDAO.obtenerMercanciaPorProveedor(idProveedor);

        if (mercancias.isEmpty()) {

            JOptionPane.showMessageDialog(this, "No existen mercancias del proveedor");

        } else {

            for (Mercancia m : mercancias) {

                dtmMercancia.addRow(new Object[]{
                    m.getIdmercancia(), m.getCodigo(), m.getNombre(), m.getStock(),
                    m.getPrecioCompraUnidad(), m.getPrecioVentaUnidad()
                });

            }

        }

    }

    private void creartablaPedido() {
        dtmPedido = new DefaultTableModel();
        dtmPedido.addColumn("Id");
        dtmPedido.addColumn("Codigo");
        dtmPedido.addColumn("Nombre");
        dtmPedido.addColumn("Cantidad");
        dtmPedido.addColumn("Nuevo Stock");
        dtmPedido.addColumn("Precio Compra");
        dtmPedido.addColumn("Precio Venta");
        dtmPedido.addColumn("Total");
        dtmPedido.addColumn("");
        dtmPedido.addColumn("");
        dtmPedido.addColumn("");

        tblPedido.setModel(dtmPedido);

        tblPedido.getColumnModel().getColumn(0).setPreferredWidth(42);
        tblPedido.getColumnModel().getColumn(0).setResizable(false);

        tblPedido.getColumnModel().getColumn(1).setPreferredWidth(100);
        tblPedido.getColumnModel().getColumn(1).setResizable(false);

        tblPedido.getColumnModel().getColumn(2).setPreferredWidth(155);
        tblPedido.getColumnModel().getColumn(2).setResizable(false);

        tblPedido.getColumnModel().getColumn(3).setPreferredWidth(80);
        tblPedido.getColumnModel().getColumn(3).setResizable(false);

        tblPedido.getColumnModel().getColumn(4).setPreferredWidth(80);
        tblPedido.getColumnModel().getColumn(4).setResizable(false);

        tblPedido.getColumnModel().getColumn(5).setPreferredWidth(100);
        tblPedido.getColumnModel().getColumn(5).setResizable(false);

        tblPedido.getColumnModel().getColumn(6).setPreferredWidth(100);
        tblPedido.getColumnModel().getColumn(6).setResizable(false);

        tblPedido.getColumnModel().getColumn(7).setPreferredWidth(70);
        tblPedido.getColumnModel().getColumn(7).setResizable(false);

        tblPedido.getColumnModel().getColumn(8).setPreferredWidth(0);
        tblPedido.getColumnModel().getColumn(8).setMaxWidth(0);
        tblPedido.getColumnModel().getColumn(8).setMinWidth(0);
        tblPedido.getColumnModel().getColumn(8).setResizable(false);

        tblPedido.getTableHeader().getColumnModel().getColumn(8).setPreferredWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(8).setMaxWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(8).setMinWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(8).setResizable(false);

        tblPedido.getColumnModel().getColumn(9).setPreferredWidth(0);
        tblPedido.getColumnModel().getColumn(9).setMaxWidth(0);
        tblPedido.getColumnModel().getColumn(9).setMinWidth(0);
        tblPedido.getColumnModel().getColumn(9).setResizable(false);

        tblPedido.getTableHeader().getColumnModel().getColumn(9).setPreferredWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(9).setMaxWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(9).setMinWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(9).setResizable(false);

        tblPedido.getColumnModel().getColumn(10).setPreferredWidth(0);
        tblPedido.getColumnModel().getColumn(10).setMaxWidth(0);
        tblPedido.getColumnModel().getColumn(10).setMinWidth(0);
        tblPedido.getColumnModel().getColumn(10).setResizable(false);

        tblPedido.getTableHeader().getColumnModel().getColumn(10).setPreferredWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(10).setMaxWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(10).setMinWidth(0);
        tblPedido.getTableHeader().getColumnModel().getColumn(10).setResizable(false);
    }

    private void limpiarCampos() {
        for (Component c : panelAgregarMercancia.getComponents()) {
            if (c instanceof JTextField txt) {
                txt.setText("");
            }
        }
    }


    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        String cantidad = txtCantidad.getText().trim();
        String precioCompra = txtPrecioCompra.getText().trim();
        String precioVenta = txtPrecioVenta.getText().trim();

        if (validarCantidad(cantidad) && !cantidad.isEmpty()) {

            if (validarPrecios(precioCompra) && validarPrecios(precioVenta) && !precioCompra.isEmpty() && !precioVenta.isEmpty()) {

                BigDecimal bigCompra = new BigDecimal(precioCompra);
                BigDecimal bigVenta = new BigDecimal(precioVenta);

                //comparar que el valor de compra sea menor que el de venta
                if (bigCompra.compareTo(bigVenta) <= 0) {

                    BigDecimal bigCantidad = new BigDecimal(cantidad);

                    int filas = tblPedido.getRowCount();
                    int ok = 0;

                    for (int i = 0; i < filas; i++) {
                        //Compobar que la mercancia no se vuelva a agregar
                        if (idTabla1.equals(tblPedido.getModel().getValueAt(i, 0))) {
                            ok = 1;
                            JOptionPane.showMessageDialog(this, "La Mercancia ya fue agregada", "Vuelva a ingresar", JOptionPane.INFORMATION_MESSAGE);
                        }

                    }

                    String precioCompraMercancia = "" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 4);
                    String precioVentaMercancia = "" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 5);

                    String precioCompraPedido = txtPrecioCompra.getText();
                    String precioVentaPedido = txtPrecioVenta.getText();

                    //La mercancia aun no se agrego
                    if (ok == 0) {

                        BigDecimal roundCompra = bigCompra.setScale(2, UNNECESSARY);
                        BigDecimal roundVenta = bigVenta.setScale(2, UNNECESSARY);

                        int stock = (int) tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 3);
                        int NuevaCantidad = Integer.parseInt(txtCantidad.getText());
                        int nuevoStock = stock + NuevaCantidad;

                        //Comparar que el precio de compra o el precio de venta ingresado
                        //sea distinto al de base de datos
                        //V si el precio es igual
                        //F si es diferente
                        if (precioCompraMercancia.equals(precioCompraPedido) && precioVentaMercancia.equals(precioVentaPedido)) {

                            dtmPedido.addRow(new Object[]{idTabla1, codigo, nombre, cantidad, nuevoStock, roundCompra, roundVenta,
                                bigCompra.multiply(bigCantidad), "v", precioCompraMercancia, precioVentaMercancia});
                            calcularTotalPedido();

                        } else {

                            dtmPedido.addRow(new Object[]{idTabla1, codigo, nombre, cantidad, nuevoStock, roundCompra, roundVenta,
                                bigCompra.multiply(bigCantidad), "f", precioCompraMercancia, precioVentaMercancia});
                            calcularTotalPedido();

                        }

                    }

                    limpiarCampos();
                } else {
                    JOptionPane.showMessageDialog(this, "El valor de compra no puede ser menor que el valor de venta", "", JOptionPane.ERROR_MESSAGE);

                }

            } else {
                JOptionPane.showMessageDialog(this, "Verifique que los precios sean correctos", "", JOptionPane.ERROR_MESSAGE);

            }

        } else {
            JOptionPane.showMessageDialog(this, "Especifique una cantidad");

        }

    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        try {

            DefaultTableModel eliminarFila = (DefaultTableModel) tblPedido.getModel();
            eliminarFila.removeRow(tblPedido.getSelectedRow());

            limpiarCampos();
            calcularTotalPedido();

        } catch (Exception e) {

        }


    }//GEN-LAST:event_btnEliminarActionPerformed


    private void btnRealizarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarPedidoActionPerformed

        int filas = tblPedido.getRowCount();

        if (filas > 0) {

            int opcion = JOptionPane.showConfirmDialog(this, "¿Desea realizar la compra?", "Eliminar", JOptionPane.YES_NO_OPTION);

            if (opcion == JOptionPane.YES_NO_OPTION) {

                try {

                    Pedido pedido = new Pedido();
                    pedido.setFecha(new Date());
                    pedido.setTotal(calcularTotalPedido());
                    pedido.setProveedorIdproveedor(new Proveedor(idProveedor));

                    pedidoDAO.crearPedido(pedido);

                    for (int i = 0; i < tblPedido.getRowCount(); i++) {

                        int idM = Integer.parseInt("" + tblPedido.getValueAt(i, 0));
                        int nuevostock = Integer.parseInt("" + tblPedido.getValueAt(i, 4));
                        String nuevoPrecioCompra = "" + tblPedido.getValueAt(i, 5);
                        String nuevoPrecioVenta = "" + tblPedido.getValueAt(i, 6);

                        mercanciaDAO.actualizarStockMercancia(idM, nuevostock, nuevoPrecioCompra, nuevoPrecioVenta);

                        Detallepedido detallePedido = new Detallepedido();
                        //
                        DetallePedidoDAO detallePedidoDAO = new DetallePedidoDAO();

                        detallePedido.setPedidoIdpedido(pedido);
                        detallePedido.setMercanciaIdmercancia(mercanciaDAO.obtenerMercanciaPorID(idM));
                        detallePedido.setCantidad(Integer.parseInt("" + tblPedido.getModel().getValueAt(i, 3)));
                        detallePedidoDAO.crearDetallePedido(detallePedido);

                        if (tblPedido.getValueAt(i, 8).toString().equals("f")) {

                            String antiguoPrecioCompra = (String) tblPedido.getValueAt(i, 9);
                            String antiguoPrecioVenta = (String) tblPedido.getValueAt(i, 10);

                            //cambiar precios
                            ActualizarPrecioDAO actualizarPrecioDAO = new ActualizarPrecioDAO();
                            //
                            Actualizarprecio actualizarPrecio = new Actualizarprecio();

                            actualizarPrecio.setNuevopreciocompra(convertirHaBigDecimal(nuevoPrecioCompra));
                            actualizarPrecio.setNuevoprecioventa(convertirHaBigDecimal(nuevoPrecioVenta));
                            actualizarPrecio.setAntiguopreciocompra(convertirHaBigDecimal(antiguoPrecioCompra));
                            actualizarPrecio.setAntiguoprecioventa(convertirHaBigDecimal(antiguoPrecioVenta));
                            actualizarPrecio.setMercanciaIdmercancia(idM);
                            actualizarPrecio.setDetallepedidoIddetallepedido(detallePedido);

                            actualizarPrecioDAO.crearActualizarPrecio(actualizarPrecio);

                        }

                    }

                    JOptionPane.showMessageDialog(this, "El pedido se realizo con exito");
                    this.setClosed(true);

                } catch (Exception e) {
                    System.out.println("Error: " + e);
                }

            }

        } else {
            JOptionPane.showMessageDialog(this, "No se puede realizar el pedido en 0");
        }


    }//GEN-LAST:event_btnRealizarPedidoActionPerformed

    private BigDecimal convertirHaBigDecimal(String precio) {
        BigDecimal convertido = new BigDecimal(precio);
        return convertido;
    }


    private void tblMercanciaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMercanciaMouseClicked

        limpiarCampos();
        try {
            idTabla1 = "" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 0);
            codigo = "" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 1);
            nombre = "" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 2);
            txtPrecioCompra.setText("" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 4));
            txtPrecioVenta.setText("" + tblMercancia.getModel().getValueAt(tblMercancia.getSelectedRow(), 5));

            txtCantidad.setEnabled(true);
            txtPrecioCompra.setEnabled(true);
            txtPrecioVenta.setEnabled(true);
        } catch (Exception e) {

        }

        JTable target = (JTable) evt.getSource();

        txtPrecioCompra.setText(tblMercancia.getModel().getValueAt(target.getSelectedRow(), 4).toString());
        txtPrecioVenta.setText(tblMercancia.getModel().getValueAt(target.getSelectedRow(), 5).toString());
        txtCantidad.setText("");

    }//GEN-LAST:event_tblMercanciaMouseClicked

    private BigDecimal calcularTotalPedido() {
        BigDecimal total = new BigDecimal("0");

        for (int i = 0; i < tblPedido.getRowCount(); i++) {
            total = total.add(new BigDecimal("" + tblPedido.getModel().getValueAt(i, 7)));

        }
        lblTotal.setText("Total a pagar:  " + total);
        return total;

    }

    /*
     * Validacion Cantidad
     * expresion regular que permite cantidades de 
     * 1 hasta 99999
     */
    private boolean validarCantidad(String cantidad) {
        return cantidad.matches("[1-9]([0-9]{0,4})?");
    }


    /*
     * Validacion Precios
     * expresion regular que permite validar precios de
     * 0.01 hasta 9999.99
     */
    private boolean validarPrecios(String precioCompra) {
        return precioCompra.matches("^([0-9]{1,5})(.)([0-9]{2})");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnRealizarPedido;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JPanel panelAgregarMercancia;
    private javax.swing.JTable tblMercancia;
    private javax.swing.JTable tblPedido;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCantidad;
    private javax.swing.JTextField txtPrecioCompra;
    private javax.swing.JTextField txtPrecioVenta;
    // End of variables declaration//GEN-END:variables
}
